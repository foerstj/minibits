//////////////////////////////////////////////////////////////////////////////
//
// File     :  mood_manager.skrit
// Author(s):  David Tomandl, James Loe
// Modified by: Tim Jones 7/28/03 to include randomizations for area 9
//
// Copyright © 2000 Gas Powered Games, Inc.  All rights reserved.
//----------------------------------------------------------------------------
//  $Revision:: $              $Date:$
//----------------------------------------------------------------------------
//NOTES:
//
// The old version is in mood_manager_old.  -J
//
///////////////////////////////////////////////////////////////////////	
// Here's our current system:
//
// We care about
// 1. Who the camera is pointing at (the camera's focus)
// 2. If that changed between the last time we checked and now
//
// If it hasn't changed, use the mood of the person that the camera is focused on
// If it has changed, instantly switch to the new person's mood
//////////////////////////////////////////////////////////////////////////////
// In addition, now the fog changes color based on the time of day.
// If the hour H :  13 <= H <= 17, fog gets 25% brighter (125% of original)
// If the hour H :  H = 5,6, or 23, fog gets 25% darker (75% of original)
// If the hour H :  0 <= H <= 4, fog gets 50% darker (50% of original)
// Otherwise, it's daytime, and the brightness of the fog stays at 100%.
//////////////////////////////////////////////////////////////////////////////
// The weather also randomly changes.  Generally, every 15 seconds there
// is a good chance of no change happening, or a small change.  There
// are small chances for a large change in the weather (20% or 30% difference
// in rain or snow density, for example).
	 
property float	fog_density_max$		= 1.0;
property float	fog_far_dist_max$		= 40.0;
property float	fog_near_dist_max$		= 20.0;
property float	fog_max_dist_modifier$	= 5.0;
property float	fog_color_modifier$		= 0.5; // although it really doesn't too much what this value is, keep it between 0 and 1
property float	minutes_modifier$		= 0.9; // 0 < minutes_modifier$ <= 1, larger value -> larger time swings

//////////////////////////////////////////////////////////////////////////////
// public definitions

// reserved tags
property bool   _server_only$		= false;
property string _doc$				= "Controls mood management";

//float battleTime$					= 0.0;		// Track of time the party has been in battle
//float battleDelay$				= 2.0;		// Delay in seconds before battle music starts playing
//float battleMusicTime$			= 0.0;		// Time the battle music will playing beyond the end of the battle
                                            	
int LastFocused$					= -1;		// Track which party member is the focus
float Time$							= 0.0;		// This is to trigger time-based actions
                                            	
int LastHour$						= -1;		// This will help track when the hour of day changes
string LastMood$					= "x";		// This will allow tracking of when the mood changes

bool rock_storm$					= false;	// is the rock storm going?
bool hail_storm$					= false;	// is the hail storm going?

//////////////////////////////////////////////////////////////////////////////
// Support Functions
//////////////////////////////////////////////////////////////////////////////

bool RandomizeWeather$( Goid target$ )
{
	return !Victory.IsQuestCompleted( "a1_staff", target$ ) && GameAuditor.GetDb.GetBool( "in_area_nine" );
}

bool GetRandomBool$()
{
	return Math.RandomFloat( 1.0 ) > 0.5;
}

float GetModifiedWeather$( float weather_baseline$, float weather_current$ )
{
	float weatherModifier$;
	float randomNumber$;

	// more or less weather?
	randomNumber$ = math.randomfloat( 1.0 );
	if ( randomNumber$ > 0.5 ) { weatherModifier$ = 1.0; }
	else { weatherModifier$ = -1.0; }

	// how much more or less?
	randomNumber$ = math.randomfloat( 1.0 );

	if( randomNumber$ < 0.5 ) { weatherModifier$ *= 0.2; }
	else if( randomNumber$ < 0.7 ) { weatherModifier$ *= 0.3; }
	else if( randomNumber$ < 0.8 ) { weatherModifier$ *= 0.4; }
	else if( randomNumber$ < 0.9 ) { weatherModifier$ *= 0.55; }
	else if( randomNumber$ < 0.95 ) { weatherModifier$ *= 0.7; }
	else { weatherModifier$ *= 0.8; }

	// find the new current weather
	weather_current$ += weather_baseline$ * weatherModifier$;		
	
	return weather_current$;
}

int GetModifiedFogColor$( int base_color$, float light_modifier$, float color_modifier$, bool upper_bound_check$ )
{

	int alphaFogComponent$, redFogComponent$, greenFogComponent$, blueFogComponent$;

	#only(game) [[
	// setup the base values
	alphaFogComponent$	= base_color$ & 0xFF000000;
	redFogComponent$	= Math.RShift( base_color$ & 0x00FF0000, 16 );
	greenFogComponent$	= Math.RShift( base_color$ & 0x0000FF00, 8 );
	blueFogComponent$	= base_color$ & 0x000000FF;

	// find min/max values
	float min_color_modifier$ = -1 * color_modifier$;
	float max_color_modifier$ = color_modifier$;

	// find a new version
	redFogComponent$ = int ( ( (float (redFogComponent$)) * light_modifier$ ) + ( Math.RandomFloat( min_color_modifier$, max_color_modifier$ ) * 255 ) ); 
	blueFogComponent$ = int ( ( (float (blueFogComponent$)) * light_modifier$ ) + ( Math.RandomFloat( min_color_modifier$, max_color_modifier$ ) * 255 ) ); 
	greenFogComponent$ = int ( ( (float (greenFogComponent$)) * light_modifier$ ) + ( Math.RandomFloat( min_color_modifier$, max_color_modifier$ ) * 255 ) );
	
	// do we want to do an upper bound check?
	if( upper_bound_check$ )
	{
		if ( ( Math.LShift( redFogComponent$, 16 ) & 0x00FF0000 ) < ( base_color$ & 0x00FF0000 ) ) { redFogComponent$ = Math.RShift( 0x00FF0000, 16 ); }
		if ( ( Math.LShift( greenFogComponent$, 8 ) & 0x0000FF00 ) < ( base_color$ & 0x0000FF00 ) ) { greenFogComponent$ = Math.RShift( 0x0000FF00, 8 ); }
		if ( ( blueFogComponent$ & 0x000000FF ) < ( base_color$ & 0x000000FF ) ) { blueFogComponent$ = 0x000000FF; }
	}

	// make sure they're positive and cast a few more times....
	redFogComponent$ = int( Math.Abs( float( redFogComponent$ ) ) );
	blueFogComponent$ = int( Math.Abs( float( blueFogComponent$ ) ) );
	greenFogComponent$ = int( Math.Abs( float( greenFogComponent$ ) ) );

	// shift them over a bit
	redFogComponent$ = Math.LShift( redFogComponent$, 16 );
	greenFogComponent$ = Math.LShift( greenFogComponent$, 8 );
	]];

	// and find the new one
	return alphaFogComponent$ | redFogComponent$ | greenFogComponent$ | blueFogComponent$;
}

//////////////////////////////////////////////////////////////////////////////

ManageMoods$( GoidColl partyMembers$, bool /*instantSwitch$*/, float secondsElapsed$ )
{

	Goid focusedGo$; 	// get the focused go

	int newFocused$;	// the number of the party member that is focused
	
	// Run through the party looking for the person with the focus
	int i$ = 0;
	while( i$ < partyMembers$.Size() )
	{
		if(partyMembers$.Get( i$ ).GetGo.IsFocused())
		{
			focusedGo$ = partyMembers$.Get( i$ );
			newFocused$ = i$; //once we find it, record which number they are
		}
        i$ += 1;
    }

	float transitionTime$ = Mood.GetGoMoodSetting( focusedGo$ ).transitionTime;

	// If the focus has changed, and the mood is different, instantly switch to the new mood

	// We can't get the mood of the last focused mood if this if the first time we have tried to manage moods.
	// We don't want to try and get a party member that doesn't exist, thus this check  --DT
	
	if ( ( LastFocused$ < 0 ) || ( LastFocused$ >= partyMembers$.Size() ) ) // if this is the first time through, OR we just disbanded a party member
	{
		transitionTime$ = 0;	
	} 
	else if ( newFocused$ != LastFocused$ )
	{	
		if ( Mood.GetGoRequestedMood( partyMembers$.Get( newFocused$ ) ) != Mood.GetGoRequestedMood( partyMembers$.Get( LastFocused$ ) ) )
		{
			transitionTime$ = 0;
		}
	}
	LastFocused$ = newFocused$;

	// Time to play with weather
	
	Time$ += secondsElapsed$;

	if ( Time$ > 15.0 && !RandomizeWeather$( focusedGo$ ) ) // time to see if the weather is going to change
	{
		//report.generic( "I'm going to see if I should change the weather.\n" );
		Time$ = 0.0;
		float randomNumber$ = math.randomfloat( 1.0 );
		// 40% of the time, the weather will not change
		if (randomNumber$ > 0.4)
		{
			//report.generic( "Yep, I'm changing the weather.\n" );
			// If it's raining, the rain will change
			if (Mood.GetGoMoodSetting( focusedGo$ ).bRainEnabled)
			{
				float rainCurrent$ = Mood.GetGoMoodSetting( focusedGo$ ).rainDensity;

				// This is the original rain density
				float rainBaseline$ = Mood.GetOriginalMoodSetting( Mood.GetGoRequestedMood( focusedGo$ ) ).rainDensity;

				float weatherModifier$;
        
				// 50/50 chance of more or less rain
				randomNumber$ = math.randomfloat( 1.0 );
				if (randomNumber$ > 0.5)
				{
					weatherModifier$ = 1.0;
					//report.generic( "More rain.\n" );
				}
				else
				{
					weatherModifier$ = -1.0;
					//report.generic( "Less rain.\n" );
				}
				randomNumber$ = math.randomfloat( 1.0 );
				// 80% chance of 10% weather change
				// 10% chance of 20% weather change
				// 6% chance of 30% weather change
				// 4% chance of 50% weather change
				
				if (randomNumber$ < 0.8)
				{
					weatherModifier$ *= 0.1;
					//report.generic( "10% change.\n" );
				}
				else if (randomNumber$ < 0.9)
				{
					weatherModifier$ *= 0.2;
					//report.generic( "20% change.\n" );
				}
				else if (randomNumber$ < 0.96)
				{
					weatherModifier$ *= 0.3;
					//report.generic( "30% change.\n" );
				}
				else
				{
					weatherModifier$ *= 0.5;
					//report.generic( "50% change.\n" );
				}

				rainCurrent$ += rainBaseline$ * weatherModifier$;				

				// This will keep the weather from becoming too different from the base mood
				if (rainCurrent$ < (rainBaseline$ * 0.5) ) { rainCurrent$ = (rainBaseline$ * 0.5); }
				if (rainCurrent$ > (rainBaseline$ * 1.5) ) { rainCurrent$ = (rainBaseline$ * 1.5); }

				// Now 100% chance of lightning above a certain threshold (used to be 70%).
				// People rarely noticed that the lightning was random, and it makes maintaining
				// the state of the lightning easier  --DT
				if ( ( rainCurrent$ >= 200.0 ) || ( GameAuditor.GetDb.GetBool( "turn_world_red" ) && ( Mood.GetGoMoodSetting( focusedGo$ ).bInterior == false ) ) )
				{
					Mood.GetGoMoodSetting( focusedGo$ ).bLightning = true;
					//report.genericF("Rain density is now %f, turned on lightning.\n", rainCurrent$);
				}
				else
				{
					Mood.GetGoMoodSetting( focusedGo$ ).bLightning = false;
					//report.genericF("Rain density is now %f, turned off lightning.\n", rainCurrent$);
				}
				
				// This applies the changes
				Mood.GetGoMoodSetting( focusedGo$ ).rainDensity = rainCurrent$;
				Mood.ForceUpdateRain(0);
				
				//report.genericF("Rain density is now %f,base rain is %f\n",rainCurrent$,rainBaseline$);
			} // end rain modification

			// If it's snowing, the snow will change
			if (Mood.GetGoMoodSetting( focusedGo$ ).bSnowEnabled)
			{
				float snowCurrent$ = Mood.GetGoMoodSetting( focusedGo$ ).snowDensity;

				// This is the original snow density
				float snowBaseline$ = Mood.GetOriginalMoodSetting( Mood.GetGoRequestedMood( focusedGo$ ) ).snowDensity;

				float weatherModifier$;
        
				// 50/50 chance of more or less snow
				randomNumber$ = math.randomfloat( 1.0 );
				if (randomNumber$ > 0.5)
				{
					weatherModifier$ = 1.0;
					//report.generic( "More snow.\n" );
				}
				else
				{
					weatherModifier$ = -1.0;
					//report.generic( "Less snow.\n" );
				}
				randomNumber$ = math.randomfloat( 1.0 );
				// 80% chance of 10% weather change
				// 10% chance of 20% weather change
				// 6% chance of 30% weather change
				// 4% chance of 50% weather change
				
				if (randomNumber$ < 0.8)
				{
					weatherModifier$ *= 0.1;
					//report.generic( "10% change.\n" );
				}
				else if (randomNumber$ < 0.9)
				{
					weatherModifier$ *= 0.2;
					//report.generic( "20% change.\n" );
				}
				else if (randomNumber$ < 0.96)
				{
					weatherModifier$ *= 0.3;
					//report.generic( "30% change.\n" );
				}
				else
				{
					weatherModifier$ *= 0.5;
					//report.generic( "50% change.\n" );
				}
				
				snowCurrent$ += snowBaseline$ * weatherModifier$;

				if (snowCurrent$ < (snowBaseline$ * 0.5) ) { snowCurrent$ = (snowBaseline$ * 0.5); }
				if (snowCurrent$ > (snowBaseline$ * 1.5) ) { snowCurrent$ = (snowBaseline$ * 1.5); }
				
				// This applies the changes
				Mood.GetGoMoodSetting( focusedGo$ ).snowDensity = snowCurrent$;
				Mood.ForceUpdateSnow(0);
			} // end snow modification

			// If it's windy, the wind will change
			if (Mood.GetGoMoodSetting( focusedGo$ ).bWindEnabled)
			{
				float windCurrent$ = Mood.GetGoMoodSetting( focusedGo$ ).windVelocity;
				// This is the original wind velocity
				float windBaseline$ = Mood.GetMoodSetting( Mood.GetGoRequestedMood( focusedGo$ ) ).windVelocity;
				float weatherModifier$;
        
				// 50/50 chance of more or less wind
				randomNumber$ = math.randomfloat( 1.0 );
				if (randomNumber$ > 0.5)
				{
					weatherModifier$ = 1.0;
					//report.generic( "More wind.\n" );
				}
				else
				{
					weatherModifier$ = -1.0;
					//report.generic( "Less wind.\n" );
				}
				randomNumber$ = math.randomfloat( 1.0 );
				// 80% chance of 10% weather change
				// 10% chance of 20% weather change
				// 6% chance of 30% weather change
				// 4% chance of 50% weather change
				
				if (randomNumber$ < 0.8)
				{
					weatherModifier$ *= 0.1;
					//report.generic( "10% change.\n" );
				}
				else if (randomNumber$ < 0.9)
				{
					weatherModifier$ *= 0.2;
					//report.generic( "20% change.\n" );
				}
				else if (randomNumber$ < 0.96)
				{
					weatherModifier$ *= 0.3;
					//report.generic( "30% change.\n" );
				}
				else
				{
					weatherModifier$ *= 0.5;
					//report.generic( "50% change.\n" );
				}
				
				windCurrent$ += windBaseline$ * weatherModifier$;				

				if (windCurrent$ < (windBaseline$ * 0.5) ) { windCurrent$ = (windBaseline$ * 0.5); }
				if (windCurrent$ > (windBaseline$ * 1.5) ) { windCurrent$ = (windBaseline$ * 1.5); }
				
				// This applies the changes
				Mood.GetGoMoodSetting( focusedGo$ ).windVelocity = windCurrent$;
				Mood.ForceUpdateWind(0);
			} // end wind modification

		} // end weather modification

		#only(game) [[
		// make sure the time of day speed is correct
		TimeOfDay.SetRealMinutesModifier( 1.0 );
		]];
	}
	else if ( Time$ > 5.0 && RandomizeWeather$( focusedGo$ ) )
	{
		// TRJ 7/28/03 - the following code pertains to the random weather in a9
		// there's nothing like a little overblown weather control to make you feel a little godly...

		// reset the time
		Time$ = 0.0;	

		/////////// Rock Storm
		// heads!!!
		if( !hail_storm$ )
		{
			if( math.randomfloat( 1.0 ) > .8 )
			{
				SiegeFX.SRunScript( "rock_storm", focusedGo$, focusedGo$, "", focusedGo$, WE_REQ_CAST);
				rock_storm$ = true;
			}
			else { rock_storm$ = false; }
		}
		
		/////////// Hail Storm
		// only allowed if raining or snowing or if we're already doing it
		if( !rock_storm$ )
		{
			if( ( ( Mood.GetGoMoodSetting( focusedGo$ ).bRainEnabled || 
					Mood.GetGoMoodSetting( focusedGo$ ).bSnowEnabled ) &&
					math.randomfloat( 1.0 ) > .7 ) ||
				( math.randomfloat( 1.0 ) > .5 && hail_storm$ ) )
			{
				SiegeFX.SRunScript( "hail_storm", focusedGo$, focusedGo$, "", focusedGo$, WE_REQ_CAST);
				hail_storm$ = true;
			}
			else { hail_storm$ = false; }
		}

		/////////// Rain

		// shall we turn it on or off?
		Mood.GetGoMoodSetting( focusedGo$).bRainEnabled = GetRandomBool$();

		// if it's on start playing with it
		if( Mood.GetGoMoodSetting( focusedGo$).bRainEnabled )
		{
			float rain_current$ = Mood.GetGoMoodSetting( focusedGo$ ).rainDensity;
			float rain_baseline$ = Mood.GetMoodSetting( Mood.GetGoRequestedMood( focusedGo$ ) ).rainDensity;

			// change the rain density
			Mood.GetGoMoodSetting( focusedGo$ ).rainDensity = GetModifiedWeather$( rain_baseline$, rain_current$ );

			// lightning? si o no?
			Mood.GetGoMoodSetting( focusedGo$ ).bLightning = GetRandomBool$();
		}

		// update
		Mood.ForceUpdateRain( 0 );

		/////////// Snow
		
		// shall we turn it on or off?
		Mood.GetGoMoodSetting( focusedGo$).bSnowEnabled = GetRandomBool$();

		// if it's on start playing with it
		if( Mood.GetGoMoodSetting( focusedGo$).bSnowEnabled )
		{
			float snow_current$ = Mood.GetGoMoodSetting( focusedGo$ ).snowDensity;
			float snow_baseline$ = Mood.GetMoodSetting( Mood.GetGoRequestedMood( focusedGo$ ) ).snowDensity;

			// change the snow density
			Mood.GetGoMoodSetting( focusedGo$ ).snowDensity = GetModifiedWeather$( snow_baseline$, snow_current$ );
		}

		// update
		Mood.ForceUpdateSnow( 0 );

		/////////// Wind

		// shall we turn it on or off?
		Mood.GetGoMoodSetting( focusedGo$).bWindEnabled = GetRandomBool$();

		// if it's on start playing with it
		if( Mood.GetGoMoodSetting( focusedGo$).bWindEnabled )
		{
			float wind_current$ = Mood.GetGoMoodSetting( focusedGo$ ).windVelocity;
			float wind_baseline$ = Mood.GetMoodSetting( Mood.GetGoRequestedMood( focusedGo$ ) ).windVelocity;

			// change the wind speed
			Mood.GetGoMoodSetting( focusedGo$ ).windVelocity = GetModifiedWeather$( wind_baseline$, wind_current$ );

			// find a new wind direction
			Mood.GetGoMoodSetting( focusedGo$ ).windDirection = Math.RandomFloat( 6.28 );
		}

		// update
		Mood.ForceUpdateWind( 0 );

		#only(game) [[
		// ok, now change the time of day speed
		TimeOfDay.SetRealMinutesModifier( 1 - Math.RandomFloat( minutes_modifier$ ) );
		]];
	}

	// This is a check to see if the lightning is enabled when it shouldn't be.
	// This could happen if they were playing in the multiplayer world, and had the "turn_world_red" quest,
	// and walked through outdoor areas.

	if (
		( Mood.GetOriginalMoodSetting( Mood.GetGoRequestedMood( focusedGo$ ) ).bLightning == false ) &&
		( Mood.GetGoMoodSetting( focusedGo$ ).bLightning == true ) &&
		!( GameAuditor.GetDb.GetBool( "turn_world_red" ) ) &&
		!( Mood.GetGoMoodSetting( focusedGo$ ).rainDensity > 200 )
	   )
	{
		Mood.GetGoMoodSetting( focusedGo$ ).bLightning = false;
		Mood.ForceUpdateRain(0); // This applies the change
		//report.genericF("Rain density is now %f, turned off lightning.\n",Mood.GetGoMoodSetting( focusedGo$ ).rainDensity);
	}

	// change the color of the fog based on the time of day.
	int currentHour$ = TimeOfDay.GetHour();
	string currentMood$ = Mood.GetGoRequestedMood( focusedGo$ ); // Get the name of the current mood
	
	// Fog color should change with time of day...but not if they are inside.  

	// Adding a check for the multiplayer "turn_world_red" quest...this is the normal block, the "turn world red" block is after this
	if ( !GameAuditor.GetDb.GetBool( "turn_world_red" ) && ( Mood.GetGoMoodSetting( focusedGo$ ).bInterior == false) && ( (currentHour$ != LastHour$) || (currentMood$ != LastMood$ ) ) )
	{
		int newFogColor$;
		float random_color_modifier$;

		// get the base color, store the old color and get ready to receive a new one
		int baseFogColor$ = Mood.GetOriginalMoodSetting( Mood.GetGoRequestedMood( focusedGo$ ) ).fogColor;
		int oldFogColor$ = Mood.GetGoMoodSetting( focusedGo$ ).fogColor;

		if ( ( currentHour$ >= 0 ) && ( currentHour$ <= 4 ) ) {
			// Night; fog color set to 50%

			// find a new random color to use
			if( RandomizeWeather$( focusedGo$ ) ) { random_color_modifier$ = fog_color_modifier$; }
			else { random_color_modifier$ = 0; }

			// get the new fog color
			newFogColor$ = GetModifiedFogColor$( baseFogColor$, 0.5, random_color_modifier$, false );
		}
		else if ( ( currentHour$ == 5 ) || ( currentHour$ == 6 ) || ( currentHour$ == 23 ) ) {
			// Sunset/Sunrise; fog color set to 75%

			// find a new random color to use
			if( RandomizeWeather$( focusedGo$ ) ) { random_color_modifier$ = fog_color_modifier$; }
			else { random_color_modifier$ = 0; }

			// get the new fog color
			newFogColor$ = GetModifiedFogColor$( baseFogColor$, 0.75, random_color_modifier$, false );
		}
		else if ( ( currentHour$ >= 13 ) && ( currentHour$ <= 17 ) ) {
			// Bright Daylight; fog color set to 125%

			// find a new random color to use
			if( RandomizeWeather$( focusedGo$ ) ) { random_color_modifier$ = fog_color_modifier$; }
			else { random_color_modifier$ = 0; }

			// get the new fog color
			newFogColor$ = GetModifiedFogColor$( baseFogColor$, 1.25, random_color_modifier$, true );
		}
		else if ( ( ( currentHour$ >= 7 ) && ( currentHour$ <= 12) ) || ( ( currentHour$ >= 18 ) && ( currentHour$ <= 22 ) ) )
		{
			// Daylight hours

			// find a new random color to use
			if( RandomizeWeather$( focusedGo$ ) ) { random_color_modifier$ = fog_color_modifier$; }
			else { random_color_modifier$ = 0; }

			// get the new fog color
			newFogColor$ = GetModifiedFogColor$( baseFogColor$, 1.0, random_color_modifier$, false );
		}

		if ( Mood.GetGoMoodSetting( focusedGo$ ).rainDensity > 200 && !RandomizeWeather$( focusedGo$ ) ) {
			// Heavy Rain darkens the fog to 85% of current value
			newFogColor$ = GetModifiedFogColor$( baseFogColor$, 0.85, 0.0, false );
		}
		// apply changes
		Mood.GetGoMoodSetting( focusedGo$ ).fogColor = newFogColor$; 

		// if we're in area nine we'll also want to mess with fog distance + density
		if( RandomizeWeather$( focusedGo$ ) )
		{
			float max_modifier$ = fog_max_dist_modifier$;
			float min_modifier$ = -1 * fog_max_dist_modifier$;

			// find a new density
			Mood.GetGoMoodSetting( focusedGo$ ).fogDensity = Math.RandomFloat( fog_density_max$ );

			// find new distances
			Mood.GetGoMoodSetting( focusedGo$ ).fogNearDist = fog_near_dist_max$ + Math.RandomFloat( min_modifier$, max_modifier$ );
			Mood.GetGoMoodSetting( focusedGo$ ).fogFarDist = fog_far_dist_max$ + Math.RandomFloat( min_modifier$, max_modifier$ );
			Mood.GetGoMoodSetting( focusedGo$ ).fogLowDetFarDist = Mood.GetGoMoodSetting( focusedGo$ ).fogFarDist - 5.0;
			Mood.GetGoMoodSetting( focusedGo$ ).fogLowDetNearDist = Mood.GetGoMoodSetting( focusedGo$ ).fogNearDist;
		}

		// if the mood has changed and the fog color, update
		if ( ( ( LastMood$ == currentMood$ ) && (oldFogColor$ != newFogColor$) ) || RandomizeWeather$( focusedGo$ ) ) { Mood.ForceUpdateFog( 15.0 ); }

		LastMood$ = currentMood$; // cleanup
		LastHour$ = currentHour$; // cleanup
		
	}
	
	// Adding this block for the special "turn the whole world red" quest in multiplayer world
	else if ( GameAuditor.GetDb.GetBool( "turn_world_red" ) && ( (currentHour$ != LastHour$) || (currentMood$ != LastMood$ ) ) )
	{

		int baseFogColor$ = Mood.GetOriginalMoodSetting( Mood.GetGoRequestedMood( focusedGo$ ) ).fogColor;
		int oldFogColor$ = Mood.GetGoMoodSetting( focusedGo$ ).fogColor;
		int newFogColor$;

		int alphaFogComponent$	= baseFogColor$ & 0xFF000000; //I'm not going to mess with the alpha, it's just here for consistency
		int redFogComponent$	= baseFogColor$ & 0x00FF0000;
		int greenFogComponent$	= baseFogColor$ & 0x0000FF00;
		int blueFogComponent$	= baseFogColor$ & 0x000000FF;
		
		//report.genericf("base fog red / green / blue : 0x%x / 0x%x / 0x%x\n", redFogComponent$, greenFogComponent$, blueFogComponent$);

		if ( ( currentHour$ >= 0 ) && ( currentHour$ <= 4 ) ) {
			// Night; fog color set to 125%
			// This is really what I'm doing...

			// redFogComponent$ *= 1.25;
			// greenFogComponent$ *= 1.25;
			// blueFogComponent$ *= 1.25;

			// ...I'm just forcing the conversions here to get rid of warnings.
			if (redFogComponent$ < greenFogComponent$) { redFogComponent$ = greenFogComponent$; }
			if (redFogComponent$ < blueFogComponent$) { redFogComponent$ = blueFogComponent$; }

			redFogComponent$ = int ( (float (redFogComponent$)) * 1.25 ); 
			greenFogComponent$ = int ( (float (greenFogComponent$)) * 0 ); 
			blueFogComponent$ = int ( (float (blueFogComponent$)) * 0 ); 

			redFogComponent$ 	= redFogComponent$   & 0x00FF0000;
			greenFogComponent$	= greenFogComponent$ & 0x0000FF00;
			blueFogComponent$	= blueFogComponent$  & 0x000000FF;

			// Upper bound check; this should prevent a bright fog from suddenly getting really dark thanks to the above calculations
			// baseFogColor$ is commented out.  If commented, anything that fails the check gets set to FF, if not commented, set to original value.
			if ( ( redFogComponent$ & 0x00FF0000 ) < ( baseFogColor$ & 0x00FF0000 ) ) { redFogComponent$ = /*baseFogColor$ & */0x00FF0000; }
			//if ( ( greenFogComponent$ & 0x0000FF00 ) < ( baseFogColor$ & 0x0000FF00 ) ) { greenFogComponent$ = /*baseFogColor$ & */0x0000FF00; }
			//if ( ( blueFogComponent$ & 0x000000FF ) < ( baseFogColor$ & 0x000000FF ) ) { blueFogComponent$ = /*baseFogColor$ & */0x000000FF; }

			newFogColor$ = alphaFogComponent$ | redFogComponent$ | greenFogComponent$ | blueFogComponent$;
		}
		else if ( ( ( currentHour$ >= 7 ) && ( currentHour$ <= 12) ) || ( ( currentHour$ >= 18 ) && ( currentHour$ <= 22 ) ) ) {
			// Normal day hours; fog color set to 75%

			if (redFogComponent$ < greenFogComponent$) { redFogComponent$ = greenFogComponent$; }
			if (redFogComponent$ < blueFogComponent$) { redFogComponent$ = blueFogComponent$; }

			// The int (float () ) conversions are to suppress warnings
			redFogComponent$ = int ( (float (redFogComponent$)) * 0.75 ); 
			greenFogComponent$ = int ( (float (greenFogComponent$)) * 0 ); 
			blueFogComponent$ = int ( (float (blueFogComponent$)) * 0 ); 

			redFogComponent$ = redFogComponent$ & 0x00FF0000;
			greenFogComponent$ = greenFogComponent$ & 0x0000FF00;
			blueFogComponent$ = blueFogComponent$ & 0x000000FF;
			newFogColor$ = alphaFogComponent$ | redFogComponent$ | greenFogComponent$ | blueFogComponent$;
		}
		else if ( ( currentHour$ >= 13 ) && ( currentHour$ <= 17 ) ) {
			// Noon; fog color set to 50%
			
			if (redFogComponent$ < greenFogComponent$) { redFogComponent$ = greenFogComponent$; }
			if (redFogComponent$ < blueFogComponent$) { redFogComponent$ = blueFogComponent$; }

			// The int (float () ) conversions are to suppress warnings
			redFogComponent$ = int ( (float (redFogComponent$)) * 0.5 ); 
			greenFogComponent$ = int ( (float (greenFogComponent$)) * 0 ); 
			blueFogComponent$ = int ( (float (blueFogComponent$)) * 0 ); 

			redFogComponent$ = redFogComponent$ & 0x00FF0000;
			greenFogComponent$ = greenFogComponent$ & 0x0000FF00;
			blueFogComponent$ = blueFogComponent$ & 0x000000FF;
			newFogColor$ = alphaFogComponent$ | redFogComponent$ | greenFogComponent$ | blueFogComponent$;
		}

		// This is the early morning/late evening hours, fog at 100% normal brightness
		else if ( (( currentHour$ >= 5 ) && ( currentHour$ <= 6 )) || ( currentHour$ == 23 ) ) {
			if (redFogComponent$ < greenFogComponent$) { redFogComponent$ = greenFogComponent$; }
			if (redFogComponent$ < blueFogComponent$) { redFogComponent$ = blueFogComponent$; }

			newFogColor$ = alphaFogComponent$ | redFogComponent$;
		}

		else {
			// other cases...not that there should be any...
			
			if (redFogComponent$ < greenFogComponent$) { redFogComponent$ = greenFogComponent$; }
			if (redFogComponent$ < blueFogComponent$) { redFogComponent$ = blueFogComponent$; }

			// The int (float () ) conversion is to suppress warnings
			redFogComponent$ = int ( (float (redFogComponent$)) * 1.0 ); 

			redFogComponent$ = redFogComponent$ & 0x00FF0000;
			greenFogComponent$ = 0; 
			blueFogComponent$ = 0; 

			newFogColor$ = alphaFogComponent$ | redFogComponent$;
		}

		if ( Mood.GetGoMoodSetting( focusedGo$ ).rainDensity > 200 ) {
			// Heavy Rain darkens the fog to 85% of current value
			
			// The int (float () ) conversions are to suppress warnings
			redFogComponent$ = int ( (float (redFogComponent$)) * 0.85 ); 
			greenFogComponent$ = int ( (float (greenFogComponent$)) * 0.85 ); 
			blueFogComponent$ = int ( (float (blueFogComponent$)) * 0.85 ); 

			redFogComponent$ = redFogComponent$ & 0x00FF0000;
			greenFogComponent$ = greenFogComponent$ & 0x0000FF00;
			blueFogComponent$ = blueFogComponent$ & 0x000000FF;

			newFogColor$ = alphaFogComponent$ | redFogComponent$ | greenFogComponent$ | blueFogComponent$;
		}

		Mood.GetGoMoodSetting( focusedGo$ ).fogColor = newFogColor$; // apply changes

		//report.genericf( "Fog base / last / new : 0x%x / 0x%x / 0x%x.\n", baseFogColor$, oldFogColor$, newFogColor$);

		// Adding this by popular request -- there will now be lightning in all non-interior areas of the world
		// when the fog is red
		if ( Mood.GetGoMoodSetting( focusedGo$ ).bInterior == false ) {
			Mood.GetGoMoodSetting( focusedGo$ ).bLightning = true;
			Mood.ForceUpdateRain(0); // This applies the change
		}

		// If the mood just changed, the engine will update the fog color to the value that we just created.
		// If the mood has not changed, we have to prompt it to update.
		
		if (( LastMood$ == currentMood$ ) && (oldFogColor$ != newFogColor$)) { Mood.ForceUpdateFog( 15.0 ); }

		LastMood$ = currentMood$; // cleanup
		LastHour$ = currentHour$; // cleanup
	
	}	// Now back to our regularly scheduled programming

	// Set the focused go as the active go for all mood components
	Mood.SetActiveSunGo( focusedGo$, transitionTime$ );
	Mood.SetActiveFogGo( focusedGo$, transitionTime$ );
	Mood.SetActiveRainGo( focusedGo$, transitionTime$ );
	Mood.SetActiveSnowGo( focusedGo$, transitionTime$ );
	Mood.SetActiveWindGo( focusedGo$, transitionTime$ );
	Mood.SetActiveMusicGo( focusedGo$, transitionTime$ );

	// Always play ambient theme and standard music
	Mood.PlayAmbientTrack( 0.0 );
	Mood.PlayStandardTrack( 0.0 );
	
	// If we decided to turn off the music (and fiddle with the "battle music" track),
	// here's how we could turn it back on:
	/*
		// Play standard music if it is not already playing
		if( !Mood.IsStandardTrackPlaying() )
		{
			Mood.PlayStandardTrack( 2.0 );
		}
	*/
	
}

//////////////////////////////////////////////////////////////////////////////

/*****************************************************************************
**							DOCUMENTATION									**
******************************************************************************

	// If you need to retrieve information about a mood, use the following:

	Mood.GetGoRequestedMood( goid );			// Get the name of the mood requested by this GO
	Mood.GetGoMoodSetting( goid );				// Get the setting requested by the GO
	Mood.GetMoodSetting( moodName );			// Get the setting for the mood of this name

	// You can manually activate a mood by name by doing:

	Mood.SetMood( moodName, transTime );		// Transition to the given mood over transTime

	// Or you can activate individual mood components directly from
	// the GO by doing:

	Mood.SetActiveSunGo( goid, transTime );		// Set the active sun mood to this GO's mood, transitioning over transTime
	Mood.SetActiveFogGo( goid, transTime );		// Set the active fog mood to this GO's mood, transitioning over transTime
	Mood.SetActiveRainGo( goid, transTime );	// Set the active rain mood to this GO's mood, transitioning over transTime
	Mood.SetActiveSnowGo( goid, transTime );	// Set the active snow mood to this GO's mood, transitioning over transTime
	Mood.SetActiveWindGo( goid, transTime );	// Set the active wind mood to this GO's mood, transitioning over transTime
	Mood.SetActiveMusicGo( goid, transTime );	// Set the active music mood to this GO's mood, transitioning over transTime

	// You can retreive information about the GO's that are currently
	// controlling different parts of the mood by calling:

	Mood.GetActiveSunGo();						// Get the active sun GO
	Mood.GetActiveFogGo();						// Get the active fog GO
	Mood.GetActiveRainGo();						// Get the active rain GO
	Mood.GetActiveSnowGo();						// Get the active snow GO
	Mood.GetActiveWindGo();						// Get the active wind GO
	Mood.GetActiveMusicGo();					// Get the active music GO

	// By default, all music is disabled.  To play any tracks, you must specify the tracks
	// to play and the time to fade the track in.  For example, to fade in a theme:

	Mood.PlayStandardTrack( 0.0 );				// Instantly start playing the standard theme
	Mood.PlayBattleTrack( 2.0 );				// Fade in battle theme over 2 seconds
	Mood.PlayAmbientTrack( 10.0 );				// Fade in ambient theme over 10 seconds

	// Once you have started a theme, you are also responsible for stopping it.  To fade out
	// the theme, you would do:

	Mood.StopStandardTrack( 1.0 );				// Fade out standard theme over 1 second
	Mood.StopBattleTrack( 0.0 );				// Instantly stop playing the battle theme
	Mood.StopAmbientTrack( 2.0 );				// Fade our ambient theme of 2 seconds

	// In many cases, you may need to determine if a theme is playing.  To do this:

	Mood.IsStandardTrackPlaying();				// See if standard track is currently playing or not
	Mood.IsBattleTrackPlaying();				// See if battle track is currently playing or not
	Mood.IsAmbientTrackPlaying();				// See if ambient track is currently playing or not

******************************************************************************
**							END DOCUMENTATION								**
*****************************************************************************/