//////////////////////////////////////////////////////////////////////////////
//
// File     : haste_manager.skrit
// Author(s): Witness
// Purpose  : Keeps account of the various types of haste alterations for the
//	      GO that this skrit is attached to. Make sure that this is 
//	      skrit is attached to a GO with a GoBody component!
//
//----------------------------------------------------------------------------
//  Version: 1.0              Date: July 20, 2003
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////

property float cast_alteration$ 	= 0.0		doc = "Decimal percentage of casting speed alteration";
property float melee_alteration$	= 0.0		doc = "Decimal percentage of melee speed alteration";
property float ranged_alteration$	= 0.0		doc = "Decimal percentage of ranged speed alteration";
property float run_alteration$		= 0.0		doc = "Decimal percentage of run speed alteration";
property float base_run_speed$		= 0.0		doc = "Run speed of the target";

owner = GoSkritComponent;

Goid target$;

startup State Idle$
{
	event OnEnterState$
	{
		//Report.SScreenF("haste_manager - initialized for %s", owner.Go.TemplateName);
		base_run_speed$ = owner.Go.Body.AvgMoveVelocity;
	}
	
	event OnGoHandleMessage$( eWorldEvent e$, WorldMessage msg$ ) {
		if( e$ == WE_EQUIPPED ) {
			//Report.Screen("player - WE_EQUIPPED");
			
			Goid equipped_item$ = msg$.SendFrom;
			
			if( !equipped_item$.IsValidMp ) {
				return;	
			}
			
			GoDb.StartWatching( owner.goid, equipped_item$ );
		}
		//else {
		//	Report.SScreenF("player - %d", e$ );	
		//}	
	}
	
	event OnGoHandleCCMessage$( eWorldEvent e$, WorldMessage msg$ ) {
		if( e$ == WE_UNEQUIPPED ) {
			//Report.Screen("player - WE_EQUIPPED");
			
			Goid equipped_item$ = msg$.SendFrom;
			
			if( !equipped_item$.IsValidMp ) {
				return;	
			}
			
			GoDb.StopWatching( owner.goid, equipped_item$ );
		}	
	}
}