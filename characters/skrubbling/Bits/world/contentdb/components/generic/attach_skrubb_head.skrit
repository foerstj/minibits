////////////////////////////////////////////////////////////////////////////////
// attach_skrubb_head.skrit
// This skrit glues the head on.
// Getting this to work, however, requires a bit of quaternion mathematics.
////////////////////////////////////////////////////////////////////////////////

// reserved tags
property bool   _server_only$		= false;
property string _doc$			= "made to put skrubbling together";
property string _required_component$	= "placement";

property string	hhead$;

owner = GoSkritComponent;

//////////////////////////////////////////////////////////////////////////////
// This is what we do when the skrit first loads
startup state Start$
{
	// Let's wait a moment for sync.
	trigger OnGoHandleMessage$( WE_ENTERED_WORLD )
	{
		This.CreateTimer( 1, 0 );
	}
	// Okay, done waiting, let's go to state-attach.
	transition -> Attach$:OnTimer( 1 );
}

state Attach$
{	
	// Just in case something stopped us from attaching before, let's repeat the
	// attempt when the timer expires again.  We'll reset the timer below.
	transition -> Attach$:OnTimer( 1 );
	// This is what we do when we enter the state.
	event OnEnterState$
	{
		int i$ = 0;
		int iend$ = Owner.Go.Parent.Children.Size();
		// Let's create a variable we will use to assess the part to be attached.
		Go Head$;
		// Here's our WHILE loop.
		while( i$ < iend$ )
		{
			Head$ = Owner.Go.Parent.Children.Get( i$ );
			// Sanity Check - did we have a child to attach?  We should, 
			// because this skrit is only called by the child when it spawns.
			if( Head$ != NULL )
			{
				// Sanity check - is the child we spawned the correct 
				// template?
				if( StringTool.SameNoCase( Head$.templatename, hhead$))
				{
					Owner.Go.Parent.Aspect.AspectHandle.AttachReverseLinkedChild( Head$.Aspect.AspectHandle, "Bip01_Head", "Bone05", MakeQuat(0.707,0,0.707,0), MakeVector(1.5,3,1) );
					i$ = iend$;
					// Follow the legs!
					MCPManager.MakeRequest(	Head$.Goid, PL_FOLLOW, Owner.Go.Goid );
				}
			}
			i$ += 1;
		}
		if( Head$ == NULL )
		{
			// Something went drastically wrong, and we had no part to attach.
			// This might be a problem with lag, so let's wait five frames and
			// try again.
			This.CreateFrameTimer( 1, 5 );
			return;
		}
		// We're done.
		SetState Done$;
	}
}

state Done$
{
	// We're done, do nothing.  This skrit will be deleted when the 
	// object it is attached to is deleted.
}